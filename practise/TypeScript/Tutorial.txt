
官网(英文) https://www.typescriptlang.org/zh/docs/handbook/typescript-from-scratch.html

官网 https://www.tslang.cn/docs/home.html

TypeScript 教程         https://www.runoob.com/typescript/ts-tutorial.html

编程教程        http://www.17bigdata.com/study/programming/index.html




TypeScript 是 JavaScript 的一个超集，支持 ECMAScript 6 标准

// 安装 typescript(两种方式)
1. npm install -g typescript
2. 安装Visual Studio的TypeScript插件

// 查看版本
tsc -v      // Version 5.2.2

//  TypeScript 转换为 JavaScript, 生成 TS_Demo.js
tsc .\TS_Demo.ts 


TypeScript文件放在src文件夹下，经过TypeScript编译器编译生成的目标文件放在dist目录下


基础语法
    TypeScript 程序由以下几个部分组成：
        模块
        函数
        变量
        语句和表达式
        注释


TypeScript 保留关键字如下表所示：
break	as	catch	switch case	if	throw	else    var	number	string	get     module	type	instanceof	typeof  public	private	enum	export      finally	for	while	void
null	super	this	new     in	return	true	false   any	extends	static	let     package	implements	interface	function    do	try	yield	const   continue	 	 


TypeScript 与面向对象
    面向对象是一种对现实世界理解和抽象的方法。
    TypeScript 是一种面向对象的编程语言。
    面向对象主要有两个概念：对象和类。

    对象：对象是类的一个实例，有状态和行为。例如，一条狗是一个对象，它的状态有：颜色、名字、品种；行为有：摇尾巴、叫、吃等。
    类：类是一个模板，它描述一类对象的行为和状态。
    方法：方法是类的操作的实现步骤。


基础类型     TS_BaseType.ts

变量声明     TS_Variable.ts

运算符       TS_Operator.ts

条件语句     TS_ConditionalStatement.ts

循环         TS_Loop.ts



元组         TS_TupleObject.ts 

联合类型     TS_UnionTypes.ts

接口         TS_Interface.ts

类           TS_Class.ts

对象         TS_Object.ts

命名空间

模块

断言         TS_Assert.ts

类型守卫     TS_TypeGuard.ts

泛型        TS_Generics.ts

装饰器      TS_Decorators.ts



编译上下文
tsconfig.json 的作用
    用于标识 TypeScript 项目的根路径；
    用于配置 TypeScript 编译器；
    用于指定编译的文件。

tsconfig.json 重要字段
    files - 设置要编译的文件的名称；
    include - 设置需要进行编译的文件，支持路径模式匹配；
    exclude - 设置无需进行编译的文件，支持路径模式匹配；
    compilerOptions - 设置与编译流程相关的选项。

compilerOptions 选项
    compilerOptions 支持很多选项，常见的有 baseUrl、 target、baseUrl、 moduleResolution 和 lib 等。

{
    "compilerOptions": {

        /* 基本选项 */
        "target": "es5",                       // 指定 ECMAScript 目标版本: 'ES3' (default), 'ES5', 'ES6'/'ES2015', 'ES2016', 'ES2017', or 'ESNEXT'
        "module": "commonjs",                  // 指定使用模块: 'commonjs', 'amd', 'system', 'umd' or 'es2015'
        "lib": [],                             // 指定要包含在编译中的库文件
        "allowJs": true,                       // 允许编译 javascript 文件
        "checkJs": true,                       // 报告 javascript 文件中的错误
        "jsx": "preserve",                     // 指定 jsx 代码的生成: 'preserve', 'react-native', or 'react'
        "declaration": true,                   // 生成相应的 '.d.ts' 文件
        "sourceMap": true,                     // 生成相应的 '.map' 文件
        "outFile": "./",                       // 将输出文件合并为一个文件
        "outDir": "./",                        // 指定输出目录
        "rootDir": "./",                       // 用来控制输出目录结构 --outDir.
        "removeComments": true,                // 删除编译后的所有的注释
        "noEmit": true,                        // 不生成输出文件
        "importHelpers": true,                 // 从 tslib 导入辅助工具函数
        "isolatedModules": true,               // 将每个文件做为单独的模块 （与 'ts.transpileModule' 类似）.

        /* 严格的类型检查选项 */
        "strict": true,                        // 启用所有严格类型检查选项
        "noImplicitAny": true,                 // 在表达式和声明上有隐含的 any类型时报错
        "strictNullChecks": true,              // 启用严格的 null 检查
        "noImplicitThis": true,                // 当 this 表达式值为 any 类型的时候，生成一个错误
        "alwaysStrict": true,                  // 以严格模式检查每个模块，并在每个文件里加入 'use strict'

        /* 额外的检查 */
        "noUnusedLocals": true,                // 有未使用的变量时，抛出错误
        "noUnusedParameters": true,            // 有未使用的参数时，抛出错误
        "noImplicitReturns": true,             // 并不是所有函数里的代码都有返回值时，抛出错误
        "noFallthroughCasesInSwitch": true,    // 报告 switch 语句的 fallthrough 错误。（即，不允许 switch 的 case 语句贯穿）

        /* 模块解析选项 */
        "moduleResolution": "node",            // 选择模块解析策略： 'node' (Node.js) or 'classic' (TypeScript pre-1.6)
        "baseUrl": "./",                       // 用于解析非相对模块名称的基目录
        "paths": {},                           // 模块名到基于 baseUrl 的路径映射的列表
        "rootDirs": [],                        // 根文件夹列表，其组合内容表示项目运行时的结构内容
        "typeRoots": [],                       // 包含类型声明的文件列表
        "types": [],                           // 需要包含的类型声明文件名列表
        "allowSyntheticDefaultImports": true,  // 允许从没有设置默认导出的模块中默认导入。

        /* Source Map Options */
        "sourceRoot": "./",                    // 指定调试器应该找到 TypeScript 文件而不是源文件的位置
        "mapRoot": "./",                       // 指定调试器应该找到映射文件而不是生成文件的位置
        "inlineSourceMap": true,               // 生成单个 soucemaps 文件，而不是将 sourcemaps 生成不同的文件
        "inlineSources": true,                 // 将代码与 sourcemaps 生成到一个文件中，要求同时设置了 --inlineSourceMap 或 --sourceMap 属性

        /* 其他选项 */
        "experimentalDecorators": true,        // 启用装饰器
        "emitDecoratorMetadata": true          // 为装饰器提供元数据的支持
    }
}

